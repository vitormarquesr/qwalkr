[{"path":"https://vitormarquesr.github.io/qwalkr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 qwalkr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/articles/qwalkr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"qwalkr","text":"Currently, qwalkr available GitHub. can install code :","code":"# install.packages(\"devtools\") devtools::install_github(\"vitormarquesr/qwalkr\")"},{"path":"https://vitormarquesr.github.io/qwalkr/articles/qwalkr.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"qwalkr","text":"use qwalkr, must first load like : Now, set.","code":"library(qwalkr)"},{"path":"https://vitormarquesr.github.io/qwalkr/articles/qwalkr.html","id":"creating-a-quantum-walk","dir":"Articles","previous_headings":"","what":"Creating a Quantum Walk","title":"qwalkr","text":"moment, qwalkr supports continuous-time quantum walks. can create continuous-time quantum walk calling qwalkr::ctqwalk() additional argument representing Hamiltonian system .e. hermitian matrix. instance, let’s create walk complete graph order three (\\(K_3\\)), Hamiltonian going adjacency matrix. ctqwalk object stores spectral decomposition Hamiltonian future usage methods. can get glimpse eigenvalues multiplicities printing object. qwalkr::ctqwalk() runs qwalkr::spectral() hood tries infer eigenvalue multiplicity, can disable feature multiplicity=FALSE set tolerance numerical equality tol. Let’s talk bit spectral, linear algebra system used qwalkr.","code":"K3 <- rbind(c(0, 1, 1),            c(1, 0, 1),            c(1, 1, 0)) w <- ctqwalk(hamiltonian = K3) w #> Continuous-Time Quantum Walk #>  #> [+]Order: 3  #>  #> [+]Spectrum of the Hamiltonian: #>                    #> Eigenvalue:   2 -1 #> Multiplicity: 1  2"},{"path":"https://vitormarquesr.github.io/qwalkr/articles/qwalkr.html","id":"linear-algebra-system---spectral","dir":"Articles","previous_headings":"","what":"Linear Algebra System - Spectral","title":"qwalkr","text":"qwalkr::spectral() constructor class spectral enhances base R spectral decomposition function base::eigen(), providing specialized treatment hermitian matrices. constructor methods can handle repeated eigenvalues, orthogonal projectors, matrix functions, . can create instance providing hermitian matrix qwalkr::spectral(): object stores ordered eigenvalues (descending) multiplicities alongside eigenvectors: can turn eigenvalue multiplicity inference multiplicity=FALSE set tolerance numerical equality tol=1e-10.","code":"A <- rbind(c(0, 1, 1),            c(1, 0, 1),            c(1, 1, 0))  s <- spectral(A) s #> $eigvals #> [1]  2 -1 #>  #> $multiplicity #> [1] 1 2 #>  #> $eigvectors #>           [,1]       [,2]       [,3] #> [1,] 0.5773503  0.8164966  0.0000000 #> [2,] 0.5773503 -0.4082483 -0.7071068 #> [3,] 0.5773503 -0.4082483  0.7071068 #>  #> attr(,\"class\") #> [1] \"spectral\""},{"path":"https://vitormarquesr.github.io/qwalkr/articles/qwalkr.html","id":"methods","dir":"Articles","previous_headings":"Linear Algebra System - Spectral","what":"Methods","title":"qwalkr","text":"spectral instance hand, can extract several matrices interest. Use qwalkr::get_eigspace() extract eigenspace associated eigenvalue. instance, let’s extract eigenvectors corresponding eigenvalue -1 providing index ordered spectra (two case) Since eigenvalue -1 multiplicity two, eigenspace dimension two well, thus get two eigenvectors. extract 2-eigenspace, get one vector. can extract orthogonal projector onto -1-eigenspace calling qwalkr::get_eigproj() way previous function: Since eigenspace dimension two, trace (qwalkr::tr()) going take value 2-eigenspace get additional methods class spectral check help page.","code":"get_eigspace(s, id = 2) #>            [,1]       [,2] #> [1,]  0.8164966  0.0000000 #> [2,] -0.4082483 -0.7071068 #> [3,] -0.4082483  0.7071068 get_eigspace(s, id=1) #>           [,1] #> [1,] 0.5773503 #> [2,] 0.5773503 #> [3,] 0.5773503 E2 <- get_eigproj(s, id=2) E2 #>            [,1]       [,2]       [,3] #> [1,]  0.6666667 -0.3333333 -0.3333333 #> [2,] -0.3333333  0.6666667 -0.3333333 #> [3,] -0.3333333 -0.3333333  0.6666667 tr(E2) #> [1] 2 E1 <- get_eigproj(s, id=1) E1 #>           [,1]      [,2]      [,3] #> [1,] 0.3333333 0.3333333 0.3333333 #> [2,] 0.3333333 0.3333333 0.3333333 #> [3,] 0.3333333 0.3333333 0.3333333  tr(E1) #> [1] 1"},{"path":"https://vitormarquesr.github.io/qwalkr/articles/qwalkr.html","id":"quantum-walks-of-class-spectral","dir":"Articles","previous_headings":"Linear Algebra System - Spectral","what":"Quantum Walks of class spectral","title":"qwalkr","text":"continuous-time quantum walks, walks evolution influenced spectrum Hamiltonian. case, class representing walk also child spectral thus inherits methods. instance, ctqwalk object also instance spectral, hence methods previous section apply:","code":"w #> Continuous-Time Quantum Walk #>  #> [+]Order: 3  #>  #> [+]Spectrum of the Hamiltonian: #>                    #> Eigenvalue:   2 -1 #> Multiplicity: 1  2  get_eigspace(w, id=2) #>            [,1]       [,2] #> [1,]  0.8164966  0.0000000 #> [2,] -0.4082483 -0.7071068 #> [3,] -0.4082483  0.7071068  class(w) #> [1] \"ctqwalk\"  \"spectral\""},{"path":"https://vitormarquesr.github.io/qwalkr/articles/qwalkr.html","id":"time-evolution","dir":"Articles","previous_headings":"","what":"Time-Evolution","title":"qwalkr","text":"can get unitary time evolution operator walk calling qwalkr::unitary_matrix() time t want evaluate . Let’s take look operator walk \\(K_3\\) time \\(t=\\frac{\\pi}{3}\\): Analogously, mixing matrix walk can obtained qwalkr::mixing_matrix():","code":"unitary_matrix(w, t=pi/3) #>                       [,1]                  [,2]                  [,3] #> [1,]  0.1666667-0.2886751i -0.3333333+0.5773503i -0.3333333+0.5773503i #> [2,] -0.3333333+0.5773503i  0.1666667-0.2886751i -0.3333333+0.5773503i #> [3,] -0.3333333+0.5773503i -0.3333333+0.5773503i  0.1666667-0.2886751i mixing_matrix(w, t=pi/3) #>           [,1]      [,2]      [,3] #> [1,] 0.1111111 0.4444444 0.4444444 #> [2,] 0.4444444 0.1111111 0.4444444 #> [3,] 0.4444444 0.4444444 0.1111111"},{"path":"https://vitormarquesr.github.io/qwalkr/articles/qwalkr.html","id":"average-evolution","dir":"Articles","previous_headings":"","what":"Average Evolution","title":"qwalkr","text":"Use qwalkr::avg_matrix() obtain (standard) average mixing matrix: instead calculate (generalized) average mixing matrix arbitrary probability distribution, call qwalkr::gavg_matrix() additional parameter R containing samples desired distribution. instance, average mixing matrix \\(K_3\\) standard Exponential random variable can obtained :","code":"avg_matrix(w) #>           [,1]      [,2]      [,3] #> [1,] 0.5555556 0.2222222 0.2222222 #> [2,] 0.2222222 0.5555556 0.2222222 #> [3,] 0.2222222 0.2222222 0.5555556 set.seed(10) gavg_matrix(w, R=rexp(1000)) #>           [,1]      [,2]      [,3] #> [1,] 0.6017741 0.1991130 0.1991130 #> [2,] 0.1991130 0.6017741 0.1991130 #> [3,] 0.1991130 0.1991130 0.6017741"},{"path":"https://vitormarquesr.github.io/qwalkr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vitor Marques. Author, maintainer.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marques V (2023). qwalkr: Handle Continuous-Time Quantum Walks R. https://github.com/vitormarquesr/qwalkr, https://vitormarquesr.github.io/qwalkr/.","code":"@Manual{,   title = {qwalkr: Handle Continuous-Time Quantum Walks with R},   author = {Vitor Marques},   year = {2023},   note = {https://github.com/vitormarquesr/qwalkr, https://vitormarquesr.github.io/qwalkr/}, }"},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Handle Continuous-Time Quantum Walks with R","text":"qwalkr numerical suite investigating quantum walks, providing estimates matrices interests help obtain insight evolution systems: Quantum Walks ctqwalk() creates continuous-time quantum walk. Investigate Hamiltonian get_eigspace() obtains eigenvectors associated eigenspace. get_eigproj() obtains orthogonal projector associated eigenspace. get_eigschur()obtains Schur product orthogonal projectors. act_eigfun() applies function Hamiltonian. Time Evolution unitary_matrix() returns unitary time evolution operator given time. mixing_matrix() returns mixing matrix given time. Average Evolution avg_matrix() returns average mixing matrix. gavg_matrix() returns generalized average mixing matrix probability distribution.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Handle Continuous-Time Quantum Walks with R","text":"Currently, qwalkr available GitHub. can install development version like :","code":"# install.packages(\"devtools\") devtools::install_github(\"vitormarquesr/qwalkr\")"},{"path":"https://vitormarquesr.github.io/qwalkr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Handle Continuous-Time Quantum Walks with R","text":"","code":"library(qwalkr)  K3 <- rbind(c(0, 1, 1),             c(1, 0, 1),             c(1, 1, 0))  w <- ctqwalk(hamiltonian = K3)  w #> Continuous-Time Quantum Walk #>  #> [+]Order: 3  #>  #> [+]Spectrum of the Hamiltonian: #>                    #> Eigenvalue:   2 -1 #> Multiplicity: 1  2   get_eigproj(w, id=2) #>            [,1]       [,2]       [,3] #> [1,]  0.6666667 -0.3333333 -0.3333333 #> [2,] -0.3333333  0.6666667 -0.3333333 #> [3,] -0.3333333 -0.3333333  0.6666667  unitary_matrix(w, t=pi/3) #>                       [,1]                  [,2]                  [,3] #> [1,]  0.1666667-0.2886751i -0.3333333+0.5773503i -0.3333333+0.5773503i #> [2,] -0.3333333+0.5773503i  0.1666667-0.2886751i -0.3333333+0.5773503i #> [3,] -0.3333333+0.5773503i -0.3333333+0.5773503i  0.1666667-0.2886751i  mixing_matrix(w, t=pi/3) #>           [,1]      [,2]      [,3] #> [1,] 0.1111111 0.4444444 0.4444444 #> [2,] 0.4444444 0.1111111 0.4444444 #> [3,] 0.4444444 0.4444444 0.1111111  avg_matrix(w) #>           [,1]      [,2]      [,3] #> [1,] 0.5555556 0.2222222 0.2222222 #> [2,] 0.2222222 0.5555556 0.2222222 #> [3,] 0.2222222 0.2222222 0.5555556"},{"path":"https://vitormarquesr.github.io/qwalkr/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Handle Continuous-Time Quantum Walks with R","text":"reference usability, check vignette website package. happen encounter bug, please file issue GitHub.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/J.html","id":null,"dir":"Reference","previous_headings":"","what":"The All-Ones Matrix — J","title":"The All-Ones Matrix — J","text":"Returns -ones matrix order n.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/J.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The All-Ones Matrix — J","text":"","code":"J(n)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/J.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The All-Ones Matrix — J","text":"n order matrix.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/J.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The All-Ones Matrix — J","text":"square matrix order \\(n\\) every entry equal 1. -ones matrix given \\(J_{n\\ x\\ n} = 1_{n\\ x\\ 1}1_{n\\ x\\ 1}^T\\).","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/J.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The All-Ones Matrix — J","text":"","code":"# Return the all-ones matrix of order 5. J(5) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    1 #> [2,]    1    1    1    1    1 #> [3,]    1    1    1    1    1 #> [4,]    1    1    1    1    1 #> [5,]    1    1    1    1    1"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/act_eigfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Function to an Operator — act_eigfun","title":"Apply a Function to an Operator — act_eigfun","text":"Apply Function Operator","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/act_eigfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Function to an Operator — act_eigfun","text":"","code":"act_eigfun(object, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/act_eigfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Function to an Operator — act_eigfun","text":"object representation operator. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/act_eigfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Function to an Operator — act_eigfun","text":"resulting operator application function.","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/act_eigfun.spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Function to a Hermitian Matrix — act_eigfun.spectral","title":"Apply a Function to a Hermitian Matrix — act_eigfun.spectral","text":"Apply function Hermitian matrix based representation given class spectral.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/act_eigfun.spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Function to a Hermitian Matrix — act_eigfun.spectral","text":"","code":"# S3 method for spectral act_eigfun(object, FUN, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/act_eigfun.spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Function to a Hermitian Matrix — act_eigfun.spectral","text":"object instance class spectral. FUN function applied matrix. ... arguments passed FUN.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/act_eigfun.spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Function to a Hermitian Matrix — act_eigfun.spectral","text":"matrix resulting application FUN. Hermitian Matrix admits spectral decomposition $$H = \\sum_k \\lambda_k E_k$$ \\(\\lambda_k\\) eigenvalues \\(E_k\\) orthogonal projector onto \\(\\lambda_k\\)-eigenspace. \\(f\\)=FUN defined eigenvalues H, act_eigfun performs following calculation $$f(H) = \\sum_k f(\\lambda_k) E_k$$","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/act_eigfun.spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Function to a Hermitian Matrix — act_eigfun.spectral","text":"","code":"H <- matrix(c(0,1,1,1,0,1,1,1,0), nrow=3) decomp <- spectral(H)  # Calculates H^2. act_eigfun(decomp, FUN = function(x) x^2) #>      [,1] [,2] [,3] #> [1,]    2    1    1 #> [2,]    1    2    1 #> [3,]    1    1    2  # Calculates sin(H). act_eigfun(decomp, FUN = function(x) sin(x)) #>            [,1]       [,2]       [,3] #> [1,] -0.2578815  0.5835895  0.5835895 #> [2,]  0.5835895 -0.2578815  0.5835895 #> [3,]  0.5835895  0.5835895 -0.2578815  # Calculates H^3. act_eigfun(decomp, FUN = function(x, y) x^y, 3) #>      [,1] [,2] [,3] #> [1,]    2    3    3 #> [2,]    3    2    3 #> [3,]    3    3    2"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.ctqwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"The Average Mixing Matrix of a Continuous-Time Quantum Walk — avg_matrix.ctqwalk","title":"The Average Mixing Matrix of a Continuous-Time Quantum Walk — avg_matrix.ctqwalk","text":"Average Mixing Matrix Continuous-Time Quantum Walk","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.ctqwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Average Mixing Matrix of a Continuous-Time Quantum Walk — avg_matrix.ctqwalk","text":"","code":"# S3 method for ctqwalk avg_matrix(object, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.ctqwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Average Mixing Matrix of a Continuous-Time Quantum Walk — avg_matrix.ctqwalk","text":"object representation quantum walk. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.ctqwalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Average Mixing Matrix of a Continuous-Time Quantum Walk — avg_matrix.ctqwalk","text":"avg_matrix() returns average mixing matrix square matrix order walk.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.ctqwalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Average Mixing Matrix of a Continuous-Time Quantum Walk — avg_matrix.ctqwalk","text":"Let \\(M(t)\\) mixing matrix quantum walk, average mixing matrix defined $$\\widehat{M} := \\lim_{T \\\\infty} \\frac{1}{T}\\int_{0}^T M(t)\\textrm{d}t$$ encodes long-term average behavior walk. Given Hamiltonian \\(H = \\sum_r \\lambda_r E_r\\), possible prove $$\\widehat{M} = \\sum_r E_r \\circ E_r$$","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.ctqwalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Average Mixing Matrix of a Continuous-Time Quantum Walk — avg_matrix.ctqwalk","text":"","code":"walk <- ctqwalk(matrix(c(0,1,0,1,0,1,0,1,0), nrow=3))  # Return the average mixing matrix avg_matrix(walk) #>       [,1] [,2]  [,3] #> [1,] 0.375 0.25 0.375 #> [2,] 0.250 0.50 0.250 #> [3,] 0.375 0.25 0.375"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"The Average Mixing Matrix of a Quantum Walk — avg_matrix","title":"The Average Mixing Matrix of a Quantum Walk — avg_matrix","text":"Average Mixing Matrix Quantum Walk","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Average Mixing Matrix of a Quantum Walk — avg_matrix","text":"","code":"avg_matrix(object, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Average Mixing Matrix of a Quantum Walk — avg_matrix","text":"object representation quantum walk. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/avg_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Average Mixing Matrix of a Quantum Walk — avg_matrix","text":"average mixing matrix.","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/cartesian.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjacency Matrix of the Cartesian Product — cartesian","title":"Adjacency Matrix of the Cartesian Product — cartesian","text":"Returns adjacency matrix cartesian product two graphs given adjacency matrix one, \\(G\\) \\(H\\).","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/cartesian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjacency Matrix of the Cartesian Product — cartesian","text":"","code":"cartesian(G, H = NULL)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/cartesian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjacency Matrix of the Cartesian Product — cartesian","text":"G adjacency matrix first graph. H adjacency matrix second graph. provided, takes value G.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/cartesian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjacency Matrix of the Cartesian Product — cartesian","text":"Let \\((G),\\ (H)\\) adjacency matrices graphs \\(G,\\ H\\) \\(|V(G)| = n\\) \\(|V(H)| = m\\), adjacency matrix cartesian product \\(G \\times H\\) given $$(G \\times H) = (G) \\otimes I_{m\\ x\\ m} + I_{n\\ x\\ n} \\otimes (H)$$","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/cartesian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjacency Matrix of the Cartesian Product — cartesian","text":"","code":"P3 <- matrix(c(0,1,0,1,0,1,0,1,0), nrow=3) K3 <- matrix(c(0,1,1,1,0,1,1,1,0), nrow=3)  # Return the adjacency matrix of P3 X K3 cartesian(P3, K3) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,]    0    1    1    1    0    0    0    0    0 #>  [2,]    1    0    1    0    1    0    0    0    0 #>  [3,]    1    1    0    0    0    1    0    0    0 #>  [4,]    1    0    0    0    1    1    1    0    0 #>  [5,]    0    1    0    1    0    1    0    1    0 #>  [6,]    0    0    1    1    1    0    0    0    1 #>  [7,]    0    0    0    1    0    0    0    1    1 #>  [8,]    0    0    0    0    1    0    1    0    1 #>  [9,]    0    0    0    0    0    1    1    1    0  # Return the adjacency matrix of P3 X P3 cartesian(P3) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,]    0    1    0    1    0    0    0    0    0 #>  [2,]    1    0    1    0    1    0    0    0    0 #>  [3,]    0    1    0    0    0    1    0    0    0 #>  [4,]    1    0    0    0    1    0    1    0    0 #>  [5,]    0    1    0    1    0    1    0    1    0 #>  [6,]    0    0    1    0    1    0    0    0    1 #>  [7,]    0    0    0    1    0    0    0    1    0 #>  [8,]    0    0    0    0    1    0    1    0    1 #>  [9,]    0    0    0    0    0    1    0    1    0"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/ctqwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Continuous-time Quantum Walk — ctqwalk","title":"Create a Continuous-time Quantum Walk — ctqwalk","text":"ctqwalk() creates quantum walk object hamiltonian.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/ctqwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Continuous-time Quantum Walk — ctqwalk","text":"","code":"ctqwalk(hamiltonian, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/ctqwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Continuous-time Quantum Walk — ctqwalk","text":"hamiltonian Hermitian Matrix representing Hamiltonian system. ... arguments passed spectral()","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/ctqwalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Continuous-time Quantum Walk — ctqwalk","text":"list walk related objects, .e hamiltonian spectral decomposition (See spectral() details)","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/ctqwalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Continuous-time Quantum Walk — ctqwalk","text":"","code":"# Creates a walk from the adjacency matrix of the graph P3. ctqwalk(matrix(c(0,1,0,1,0,1,0,1,0), nrow=3)) #> Continuous-Time Quantum Walk #>  #> [+]Order: 3  #>  #> [+]Spectrum of the Hamiltonian: #>                            #> Eigenvalue:   1.41 0 -1.41 #> Multiplicity: 1.00 1  1.00"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.ctqwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalized Average Mixing Matrix of a Continuous-Time Quantum Walk — gavg_matrix.ctqwalk","title":"The Generalized Average Mixing Matrix of a Continuous-Time Quantum Walk — gavg_matrix.ctqwalk","text":"Generalized Average Mixing Matrix Continuous-Time Quantum Walk","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.ctqwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalized Average Mixing Matrix of a Continuous-Time Quantum Walk — gavg_matrix.ctqwalk","text":"","code":"# S3 method for ctqwalk gavg_matrix(object, R, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.ctqwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalized Average Mixing Matrix of a Continuous-Time Quantum Walk — gavg_matrix.ctqwalk","text":"object representation quantum walk. R samples random variable \\(R\\) (performance, recommended 10000 samples). ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.ctqwalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalized Average Mixing Matrix of a Continuous-Time Quantum Walk — gavg_matrix.ctqwalk","text":"gavg_matrix() returns generalized average mixing matrix square matrix order walk.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.ctqwalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalized Average Mixing Matrix of a Continuous-Time Quantum Walk — gavg_matrix.ctqwalk","text":"Let \\(M(t)\\) mixing matrix quantum walk \\(R\\) random variable associated probability density function \\(f_R(t)\\). generalized average mixing matrix \\(R\\) defined $$\\widehat{M}_R := \\mathbb{E}[M(R)] = \\int_{-\\infty}^{\\infty} M(t)f_R(t)\\textrm{d}t$$","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.ctqwalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalized Average Mixing Matrix of a Continuous-Time Quantum Walk — gavg_matrix.ctqwalk","text":"","code":"walk <- ctqwalk(matrix(c(0,1,0,1,0,1,0,1,0), nrow=3))  # Return the average mixing matrix under a Standard Gaussian distribution gavg_matrix(walk, rnorm(1000)) #>           [,1]      [,2]      [,3] #> [1,] 0.5449165 0.2444647 0.2106188 #> [2,] 0.2444647 0.5110706 0.2444647 #> [3,] 0.2106188 0.2444647 0.5449165"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalized Average Mixing Matrix of a Quantum Walk — gavg_matrix","title":"The Generalized Average Mixing Matrix of a Quantum Walk — gavg_matrix","text":"Generalized Average Mixing Matrix Quantum Walk","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalized Average Mixing Matrix of a Quantum Walk — gavg_matrix","text":"","code":"gavg_matrix(object, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalized Average Mixing Matrix of a Quantum Walk — gavg_matrix","text":"object representation quantum walk. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/gavg_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalized Average Mixing Matrix of a Quantum Walk — gavg_matrix","text":"generalized average mixing matrix.","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigproj.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an Eigen-Projector from an operator — get_eigproj","title":"Extract an Eigen-Projector from an operator — get_eigproj","text":"Extract Eigen-Projector operator","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigproj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an Eigen-Projector from an operator — get_eigproj","text":"","code":"get_eigproj(object, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigproj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an Eigen-Projector from an operator — get_eigproj","text":"object representation operator. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigproj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an Eigen-Projector from an operator — get_eigproj","text":"representation requested eigen-projector.","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigproj.spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an Eigen-Projector from a Hermitian Matrix — get_eigproj.spectral","title":"Extract an Eigen-Projector from a Hermitian Matrix — get_eigproj.spectral","text":"Get orthogonal projector associated eigenspace based representation Hermitian Matrix given class spectral.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigproj.spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an Eigen-Projector from a Hermitian Matrix — get_eigproj.spectral","text":"","code":"# S3 method for spectral get_eigproj(object, id, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigproj.spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an Eigen-Projector from a Hermitian Matrix — get_eigproj.spectral","text":"object instance class spectral. id index desired eigenspace according ordered (decreasing) spectra. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigproj.spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an Eigen-Projector from a Hermitian Matrix — get_eigproj.spectral","text":"orthogonal projector desired eigenspace. Hermitian matrix S admits spectral decomposition \\(S = \\sum_{r}\\lambda_r E_r\\) \\(E_r\\) orthogonal projector onto \\(\\lambda_r\\)-eigenspace. \\(V_{id}\\) matrix associated eigenspace, $$E_{id} = V_{id}V_{id}^*$$","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigproj.spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an Eigen-Projector from a Hermitian Matrix — get_eigproj.spectral","text":"","code":"# Spectra is {2, -1} with multiplicities one and two respectively. decomp <- spectral(matrix(c(0,1,1,1,0,1,1,1,0), nrow=3))  # Returns the projector associated to the eigenvalue -1. get_eigproj(decomp, id=2) #>            [,1]       [,2]       [,3] #> [1,]  0.6666667 -0.3333333 -0.3333333 #> [2,] -0.3333333  0.6666667 -0.3333333 #> [3,] -0.3333333 -0.3333333  0.6666667  # Returns the projector associated to the eigenvalue 2. get_eigproj(decomp, id=1) #>           [,1]      [,2]      [,3] #> [1,] 0.3333333 0.3333333 0.3333333 #> [2,] 0.3333333 0.3333333 0.3333333 #> [3,] 0.3333333 0.3333333 0.3333333"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigschur.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a Schur Cross-Product from an Operator — get_eigschur","title":"Extract a Schur Cross-Product from an Operator — get_eigschur","text":"Extract Schur Cross-Product Operator","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigschur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a Schur Cross-Product from an Operator — get_eigschur","text":"","code":"get_eigschur(object, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigschur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a Schur Cross-Product from an Operator — get_eigschur","text":"object representation operator. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigschur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a Schur Cross-Product from an Operator — get_eigschur","text":"representation requested Schur cross-product.","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigschur.spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a Schur Cross-Product from a Hermitian Matrix — get_eigschur.spectral","title":"Extract a Schur Cross-Product from a Hermitian Matrix — get_eigschur.spectral","text":"Get Schur product eigen-projectors based  representation Hermitian Matrix given class spectral.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigschur.spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a Schur Cross-Product from a Hermitian Matrix — get_eigschur.spectral","text":"","code":"# S3 method for spectral get_eigschur(object, id1, id2 = NULL, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigschur.spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a Schur Cross-Product from a Hermitian Matrix — get_eigschur.spectral","text":"object instance class spectral. id1 index first eigenspace according ordered (decreasing) spectra. id2 index second eigenspace according ordered (decreasing) spectra. provided, takes value id1. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigschur.spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a Schur Cross-Product from a Hermitian Matrix — get_eigschur.spectral","text":"Schur product corresponding eigenprojectors, \\(E_{id_1} \\circ E_{id_2}\\).","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigschur.spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a Schur Cross-Product from a Hermitian Matrix — get_eigschur.spectral","text":"","code":"# Spectra is {2, -1} with multiplicities one and two respectively. decomp <- spectral(matrix(c(0,1,1,1,0,1,1,1,0), nrow=3))  # Returns the Schur product between the 2-projector and -1-projector. get_eigschur(decomp, id1=2, id2=1) #>            [,1]       [,2]       [,3] #> [1,]  0.2222222 -0.1111111 -0.1111111 #> [2,] -0.1111111  0.2222222 -0.1111111 #> [3,] -0.1111111 -0.1111111  0.2222222  # Returns the Schur square of the 2-projector. get_eigschur(decomp, id1=1, id2=1) #>           [,1]      [,2]      [,3] #> [1,] 0.1111111 0.1111111 0.1111111 #> [2,] 0.1111111 0.1111111 0.1111111 #> [3,] 0.1111111 0.1111111 0.1111111  # Also returns the Schur square of the 2-projector get_eigschur(decomp, id1=1) #>           [,1]      [,2]      [,3] #> [1,] 0.1111111 0.1111111 0.1111111 #> [2,] 0.1111111 0.1111111 0.1111111 #> [3,] 0.1111111 0.1111111 0.1111111"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigspace.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an Eigenspace from an Operator — get_eigspace","title":"Extract an Eigenspace from an Operator — get_eigspace","text":"Extract Eigenspace Operator","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an Eigenspace from an Operator — get_eigspace","text":"","code":"get_eigspace(object, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an Eigenspace from an Operator — get_eigspace","text":"object representation operator. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigspace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an Eigenspace from an Operator — get_eigspace","text":"representation requested eigenspace.","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigspace.spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an Eigenspace from a Hermitian Matrix — get_eigspace.spectral","title":"Extract an Eigenspace from a Hermitian Matrix — get_eigspace.spectral","text":"Get eigenbasis associated eigenvalue based representation Hermitian Matrix given class spectral.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigspace.spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an Eigenspace from a Hermitian Matrix — get_eigspace.spectral","text":"","code":"# S3 method for spectral get_eigspace(object, id, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigspace.spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an Eigenspace from a Hermitian Matrix — get_eigspace.spectral","text":"object instance class spectral. id index desired eigenspace according ordered (decreasing) spectra. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigspace.spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an Eigenspace from a Hermitian Matrix — get_eigspace.spectral","text":"matrix whose columns form orthonormal eigenbasis. s <- spectral() V <- s$eigvectors, extracted eigenspace \\(V_{id}\\) submatrix V[, _].","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/get_eigspace.spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an Eigenspace from a Hermitian Matrix — get_eigspace.spectral","text":"","code":"# Spectra is {2, -1} with multiplicities one and two respectively. decomp <- spectral(matrix(c(0,1,1,1,0,1,1,1,0), nrow=3))  # Returns the two orthonormal eigenvectors corresponding to the eigenvalue -1. get_eigspace(decomp, id=2) #>            [,1]       [,2] #> [1,]  0.8164966  0.0000000 #> [2,] -0.4082483 -0.7071068 #> [3,] -0.4082483  0.7071068  # Returns the eigenvector corresponding to the eigenvalue 2. get_eigspace(decomp, id=1) #>           [,1] #> [1,] 0.5773503 #> [2,] 0.5773503 #> [3,] 0.5773503"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.ctqwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"The Mixing Matrix of a Continuous-Time Quantum Walk — mixing_matrix.ctqwalk","title":"The Mixing Matrix of a Continuous-Time Quantum Walk — mixing_matrix.ctqwalk","text":"Mixing Matrix Continuous-Time Quantum Walk","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.ctqwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Mixing Matrix of a Continuous-Time Quantum Walk — mixing_matrix.ctqwalk","text":"","code":"# S3 method for ctqwalk mixing_matrix(object, t, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.ctqwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Mixing Matrix of a Continuous-Time Quantum Walk — mixing_matrix.ctqwalk","text":"object instance class ctqwalk. t returned mixing matrix time t. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.ctqwalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Mixing Matrix of a Continuous-Time Quantum Walk — mixing_matrix.ctqwalk","text":"mixing_matrix() returns  mixing matrix CTQW evaluated time t.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.ctqwalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Mixing Matrix of a Continuous-Time Quantum Walk — mixing_matrix.ctqwalk","text":"Let \\(U(t)\\) time evolution operator quantum walk time \\(t\\), mixing matrix given $$M(t) = U(t) \\circ \\overline{U(t)}$$ \\(M(t)\\) doubly stochastic real symmetric matrix, encodes probability density quantum system time \\(t\\). precisely, \\((M(t))_{ab}\\) entry gives us probability measuring standard basis state \\(|b \\rangle\\) time \\(t\\), given quantum walk started \\(|\\rangle\\).","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.ctqwalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Mixing Matrix of a Continuous-Time Quantum Walk — mixing_matrix.ctqwalk","text":"","code":"walk <- ctqwalk(matrix(c(0,1,0,1,0,1,0,1,0), nrow=3))  # Returns the mixing matrix at time t = 2*pi, M(2pi) mixing_matrix(walk, t = 2*pi) #>             [,1]      [,2]        [,3] #> [1,] 0.005025663 0.1317325 0.863241848 #> [2,] 0.131732489 0.7365350 0.131732489 #> [3,] 0.863241848 0.1317325 0.005025663"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"The Mixing Matrix of a Quantum Walk — mixing_matrix","title":"The Mixing Matrix of a Quantum Walk — mixing_matrix","text":"Mixing Matrix Quantum Walk","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Mixing Matrix of a Quantum Walk — mixing_matrix","text":"","code":"mixing_matrix(object, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Mixing Matrix of a Quantum Walk — mixing_matrix","text":"object representation quantum walk. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/mixing_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Mixing Matrix of a Quantum Walk — mixing_matrix","text":"mixing matrix quantum walk.","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/print.ctqwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the ctqwalk output — print.ctqwalk","title":"Print the ctqwalk output — print.ctqwalk","text":"Print ctqwalk output","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/print.ctqwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the ctqwalk output — print.ctqwalk","text":"","code":"# S3 method for ctqwalk print(x, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/print.ctqwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the ctqwalk output — print.ctqwalk","text":"x object class ctqwalk. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/print.ctqwalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the ctqwalk output — print.ctqwalk","text":"Called mainly side effects. However, also returns x invisibly.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/qwalkr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"qwalkr: Handle Continuous-Time Quantum Walks with R — qwalkr-package","title":"qwalkr: Handle Continuous-Time Quantum Walks with R — qwalkr-package","text":"Functions methods create, visualize, investigate properties Continous-Time Quantum Walks. addition, tools efficiently calculate matrices arise context Quantum Walks.","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/qwalkr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"qwalkr: Handle Continuous-Time Quantum Walks with R — qwalkr-package","text":"Maintainer: Vitor Marques vmrodriguespro@gmail.com","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral Decomposition of a Hermitian Matrix — spectral","title":"Spectral Decomposition of a Hermitian Matrix — spectral","text":"spectral() wrapper around base::eigen() designed Hermitian matrices, can handle repeated eigenvalues.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectral Decomposition of a Hermitian Matrix — spectral","text":"","code":"spectral(S, multiplicity = TRUE, tol = .Machine$double.eps^0.5, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectral Decomposition of a Hermitian Matrix — spectral","text":"S Hermitian matrix. Obs: matrix always assumed Hermitian, lower triangle (diagonal included) used. multiplicity TRUE (default), tries infer eigenvalue multiplicity. set FALSE, eigenvalue considered unique multiplicity one. tol two eigenvalues x, y considered equal abs(x-y) < tol. Defaults tol=.Machine$double.eps^0.5. ... arguments passed base::eigen()","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectral Decomposition of a Hermitian Matrix — spectral","text":"spectral decomposition S returned list components eigvals vector containing unique eigenvalues S decreasing order. multiplicity multiplicities eigenvalues eigvals. eigvectors nrow(S) x nrow(S) unitary matrix whose columns eigenvectors ordered according eigvals. Note may eigenvectors eigenvalues multiplicity=TRUE, however eigenvectors eigenspace next . Spectral Theorem ensures eigenvalues S real vector space admits orthonormal basis consisting eigenvectors S. Thus, s <- spectral(S), V <- s$eigvectors; lam <- s$eigvals, $$S = V \\Lambda V^{*}$$ \\(\\Lambda =\\ \\)diag(rep(lam, times=s$multiplicity))","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectral Decomposition of a Hermitian Matrix — spectral","text":"","code":"spectral(matrix(c(0,1,0,1,0,1,0,1,0), nrow=3)) #> $eigvals #> [1]  1.414214e+00  1.554312e-15 -1.414214e+00 #>  #> $multiplicity #> [1] 1 1 1 #>  #> $eigvectors #>           [,1]          [,2]       [,3] #> [1,] 0.5000000 -7.071068e-01 -0.5000000 #> [2,] 0.7071068 -9.420555e-16  0.7071068 #> [3,] 0.5000000  7.071068e-01 -0.5000000 #>  #> attr(,\"class\") #> [1] \"spectral\"  # Use \"tol\" to set the tolerance for numerical equality spectral(matrix(c(0,1,0,1,0,1,0,1,0), nrow=3), tol=10e-5) #> $eigvals #> [1]  1.414214e+00  1.554312e-15 -1.414214e+00 #>  #> $multiplicity #> [1] 1 1 1 #>  #> $eigvectors #>           [,1]          [,2]       [,3] #> [1,] 0.5000000 -7.071068e-01 -0.5000000 #> [2,] 0.7071068 -9.420555e-16  0.7071068 #> [3,] 0.5000000  7.071068e-01 -0.5000000 #>  #> attr(,\"class\") #> [1] \"spectral\"  # Use \"multiplicity=FALSE\" to force each eigenvalue to be considered unique spectral(matrix(c(0,1,0,1,0,1,0,1,0), nrow=3), multiplicity = FALSE) #> $eigvals #> [1]  1.414214e+00  1.554312e-15 -1.414214e+00 #>  #> $multiplicity #> [1] 1 1 1 #>  #> $eigvectors #>           [,1]          [,2]       [,3] #> [1,] 0.5000000 -7.071068e-01 -0.5000000 #> [2,] 0.7071068 -9.420555e-16  0.7071068 #> [3,] 0.5000000  7.071068e-01 -0.5000000 #>  #> attr(,\"class\") #> [1] \"spectral\""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/tr.html","id":null,"dir":"Reference","previous_headings":"","what":"The Trace of a Matrix — tr","title":"The Trace of a Matrix — tr","text":"Computes trace matrix .","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/tr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Trace of a Matrix — tr","text":"","code":"tr(A)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/tr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Trace of a Matrix — tr","text":"square matrix.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/tr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Trace of a Matrix — tr","text":"\\(\\) order \\(n\\), \\(tr() = \\sum_{=1}^{n}a_{ii}\\).","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/tr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Trace of a Matrix — tr","text":"","code":"A <- rbind(1:5, 2:6, 3:7)  # Calculate the trace of A tr(A) #> [1] 9"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/trdot.html","id":null,"dir":"Reference","previous_headings":"","what":"The Trace Inner Product of Matrices — trdot","title":"The Trace Inner Product of Matrices — trdot","text":"Computes trace inner product two matrices B.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/trdot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Trace Inner Product of Matrices — trdot","text":"","code":"trdot(A, B)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/trdot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Trace Inner Product of Matrices — trdot","text":", B square matrices.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/trdot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Trace Inner Product of Matrices — trdot","text":"trace inner product \\(Mat_{n\\ x\\ n}(\\mathbb{C})\\) defined $$\\langle , B \\rangle := tr(^*B)$$","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/trdot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Trace Inner Product of Matrices — trdot","text":"","code":"A <- rbind(1:5, 2:6, 3:7) B <- rbind(7:11, 8:12, 9:13)  # Compute the trace inner product of A and B trdot(A, B) #> [1] 640"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.ctqwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"The Unitary Time Evolution Operator of a Continuous-Time Quantum Walk — unitary_matrix.ctqwalk","title":"The Unitary Time Evolution Operator of a Continuous-Time Quantum Walk — unitary_matrix.ctqwalk","text":"Unitary Time Evolution Operator Continuous-Time Quantum Walk","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.ctqwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Unitary Time Evolution Operator of a Continuous-Time Quantum Walk — unitary_matrix.ctqwalk","text":"","code":"# S3 method for ctqwalk unitary_matrix(object, t, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.ctqwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Unitary Time Evolution Operator of a Continuous-Time Quantum Walk — unitary_matrix.ctqwalk","text":"object instance class ctqwalk. t returned evolution operator time t. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.ctqwalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Unitary Time Evolution Operator of a Continuous-Time Quantum Walk — unitary_matrix.ctqwalk","text":"unitary_matrix() returns unitary time evolution operator CTQW evaluated time t.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.ctqwalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Unitary Time Evolution Operator of a Continuous-Time Quantum Walk — unitary_matrix.ctqwalk","text":"\\(|\\psi(t) \\rangle\\) quantum state system time \\(t\\), \\(H\\) Hamiltonian operator, evolution governed Schrodinger equation $$\\frac{\\partial}{\\partial t}|\\psi(t) \\rangle = iH|\\psi(t) \\rangle$$ \\(H\\) time-independent solution given $$|\\psi(t) \\rangle = U(t)|\\psi(0) \\rangle = e^{iHt}|\\psi(0) \\rangle$$ evolution operator result complex matrix exponential can calculated $$U(t) = e^{iHt} = \\sum_r e^{t \\lambda_r}E_r$$ \\(H = \\sum_r \\lambda_r E_r\\).","code":""},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.ctqwalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Unitary Time Evolution Operator of a Continuous-Time Quantum Walk — unitary_matrix.ctqwalk","text":"","code":"walk <- ctqwalk(matrix(c(0,1,0,1,0,1,0,1,0), nrow=3))  # Returns the operator at time t = 2*pi, U(2pi) unitary_matrix(walk, t = 2*pi) #>                        [,1]                  [,2]                   [,3] #> [1,]  0.07089191+0.0000000i  0.0000000+0.3629497i -0.92910809-0.0000000i #> [2,]  0.00000000+0.3629497i -0.8582162-0.0000000i  0.00000000+0.3629497i #> [3,] -0.92910809-0.0000000i  0.0000000+0.3629497i  0.07089191+0.0000000i"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"The Unitary Time Evolution Operator of a Quantum Walk — unitary_matrix","title":"The Unitary Time Evolution Operator of a Quantum Walk — unitary_matrix","text":"Unitary Time Evolution Operator Quantum Walk","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Unitary Time Evolution Operator of a Quantum Walk — unitary_matrix","text":"","code":"unitary_matrix(object, ...)"},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Unitary Time Evolution Operator of a Quantum Walk — unitary_matrix","text":"object representation quantum walk. ... arguments passed methods.","code":""},{"path":"https://vitormarquesr.github.io/qwalkr/reference/unitary_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Unitary Time Evolution Operator of a Quantum Walk — unitary_matrix","text":"unitary time evolution operator.","code":""},{"path":[]},{"path":[]},{"path":"https://vitormarquesr.github.io/qwalkr/news/index.html","id":"qwalkr-100","dir":"Changelog","previous_headings":"","what":"qwalkr 1.0.0","title":"qwalkr 1.0.0","text":"Initial CRAN submission.","code":""}]
